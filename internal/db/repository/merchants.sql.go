// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: merchants.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (
    uuid,
    created_at,
    updated_at,
    deleted_at,
    name,
    website,
    creator_id,
    settings
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, uuid, created_at, updated_at, deleted_at, name, website, creator_id, settings
`

type CreateMerchantParams struct {
	Uuid      uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
	Name      string
	Website   string
	CreatorID int64
	Settings  pgtype.JSONB
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, createMerchant,
		arg.Uuid,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Name,
		arg.Website,
		arg.CreatorID,
		arg.Settings,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Website,
		&i.CreatorID,
		&i.Settings,
	)
	return i, err
}

const getMerchantByID = `-- name: GetMerchantByID :one
SELECT id, uuid, created_at, updated_at, deleted_at, name, website, creator_id, settings FROM merchants
WHERE id = $1
AND (CASE WHEN $2::boolean THEN true ELSE deleted_at is null END)
LIMIT 1
`

type GetMerchantByIDParams struct {
	ID          int64
	WithTrashed bool
}

func (q *Queries) GetMerchantByID(ctx context.Context, arg GetMerchantByIDParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, getMerchantByID, arg.ID, arg.WithTrashed)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Website,
		&i.CreatorID,
		&i.Settings,
	)
	return i, err
}

const getMerchantByUUID = `-- name: GetMerchantByUUID :one
SELECT id, uuid, created_at, updated_at, deleted_at, name, website, creator_id, settings FROM merchants
WHERE uuid = $1
AND (CASE WHEN $2::boolean THEN true ELSE deleted_at is null END)
LIMIT 1
`

type GetMerchantByUUIDParams struct {
	Uuid        uuid.UUID
	WithTrashed bool
}

func (q *Queries) GetMerchantByUUID(ctx context.Context, arg GetMerchantByUUIDParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, getMerchantByUUID, arg.Uuid, arg.WithTrashed)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Website,
		&i.CreatorID,
		&i.Settings,
	)
	return i, err
}

const getMerchantByUUIDAndCreatorID = `-- name: GetMerchantByUUIDAndCreatorID :one
SELECT id, uuid, created_at, updated_at, deleted_at, name, website, creator_id, settings FROM merchants
WHERE uuid = $1 and creator_id = $2
AND (CASE WHEN $3::boolean THEN true ELSE deleted_at is null END)
LIMIT 1
`

type GetMerchantByUUIDAndCreatorIDParams struct {
	Uuid        uuid.UUID
	CreatorID   int64
	WithTrashed bool
}

func (q *Queries) GetMerchantByUUIDAndCreatorID(ctx context.Context, arg GetMerchantByUUIDAndCreatorIDParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, getMerchantByUUIDAndCreatorID, arg.Uuid, arg.CreatorID, arg.WithTrashed)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Website,
		&i.CreatorID,
		&i.Settings,
	)
	return i, err
}

const listMerchantsByCreatorID = `-- name: ListMerchantsByCreatorID :many
SELECT id, uuid, created_at, updated_at, deleted_at, name, website, creator_id, settings FROM merchants
WHERE creator_id = $1
AND (CASE WHEN $2::boolean THEN true ELSE deleted_at is null END)
ORDER BY id desc
`

type ListMerchantsByCreatorIDParams struct {
	CreatorID   int64
	WithTrashed bool
}

func (q *Queries) ListMerchantsByCreatorID(ctx context.Context, arg ListMerchantsByCreatorIDParams) ([]Merchant, error) {
	rows, err := q.db.Query(ctx, listMerchantsByCreatorID, arg.CreatorID, arg.WithTrashed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merchant
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Website,
			&i.CreatorID,
			&i.Settings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteMerchantByUUID = `-- name: SoftDeleteMerchantByUUID :exec
UPDATE merchants
SET deleted_at = current_timestamp
WHERE uuid = $1
`

func (q *Queries) SoftDeleteMerchantByUUID(ctx context.Context, uuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteMerchantByUUID, uuid)
	return err
}

const updateMerchant = `-- name: UpdateMerchant :one
UPDATE merchants
SET
    updated_at = $2,
    name = $3,
    website = $4
WHERE id = $1
RETURNING id, uuid, created_at, updated_at, deleted_at, name, website, creator_id, settings
`

type UpdateMerchantParams struct {
	ID        int64
	UpdatedAt time.Time
	Name      string
	Website   string
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, updateMerchant,
		arg.ID,
		arg.UpdatedAt,
		arg.Name,
		arg.Website,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Website,
		&i.CreatorID,
		&i.Settings,
	)
	return i, err
}

const updateMerchantSettings = `-- name: UpdateMerchantSettings :exec
UPDATE merchants
SET updated_at = $2, settings = $3
WHERE id = $1
`

type UpdateMerchantSettingsParams struct {
	ID        int64
	UpdatedAt time.Time
	Settings  pgtype.JSONB
}

func (q *Queries) UpdateMerchantSettings(ctx context.Context, arg UpdateMerchantSettingsParams) error {
	_, err := q.db.Exec(ctx, updateMerchantSettings, arg.ID, arg.UpdatedAt, arg.Settings)
	return err
}
