// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    password,
    uuid,
    google_id,
    profile_image_url,
    created_at,
    updated_at,
    deleted_at,
    settings
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password
`

type CreateUserParams struct {
	Name            string
	Email           string
	Password        sql.NullString
	Uuid            uuid.UUID
	GoogleID        sql.NullString
	ProfileImageUrl sql.NullString
	CreatedAt       time.Time
	UpdatedAt       time.Time
	DeletedAt       sql.NullTime
	Settings        pgtype.JSONB
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Uuid,
		arg.GoogleID,
		arg.ProfileImageUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Settings,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uuid,
		&i.GoogleID,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Settings,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uuid,
		&i.GoogleID,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Settings,
		&i.Password,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password FROM users
WHERE google_id = $1 LIMIT 1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID sql.NullString) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uuid,
		&i.GoogleID,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Settings,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uuid,
		&i.GoogleID,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Settings,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password FROM users
ORDER BY id desc
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Uuid,
			&i.GoogleID,
			&i.ProfileImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Settings,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2,
    profile_image_url= $3,
    google_id = CASE WHEN $6::boolean THEN $4 ELSE users.google_id END,
    updated_at = $5
WHERE id = $1
RETURNING id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password
`

type UpdateUserParams struct {
	ID              int64
	Name            string
	ProfileImageUrl sql.NullString
	GoogleID        sql.NullString
	UpdatedAt       time.Time
	SetGoogleID     bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.ProfileImageUrl,
		arg.GoogleID,
		arg.UpdatedAt,
		arg.SetGoogleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uuid,
		&i.GoogleID,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Settings,
		&i.Password,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, name, email, uuid, google_id, profile_image_url, created_at, updated_at, deleted_at, settings, password
`

type UpdateUserPasswordParams struct {
	ID        int64
	Password  sql.NullString
	UpdatedAt time.Time
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.ID, arg.Password, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Uuid,
		&i.GoogleID,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Settings,
		&i.Password,
	)
	return i, err
}
