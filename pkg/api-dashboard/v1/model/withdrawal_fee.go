// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WithdrawalFee withdrawal fee
//
// swagger:model withdrawalFee
type WithdrawalFee struct {

	// Blockchain
	// Example: ETH
	Blockchain string `json:"blockchain"`

	// calculated at
	// Example: 2023-04-06 19:56:39.358834 +0000 UTC
	// Format: datetime
	CalculatedAt strfmt.DateTime `json:"calculatedAt"`

	// Currency
	// Example: ETH_USDT
	Currency string `json:"currency"`

	// Fee in withdrawal currency
	// Example: 5.75
	CurrencyFee string `json:"currencyFee"`

	// Indicates whether currency is on testnet
	IsTest bool `json:"isTest"`

	// USD fee
	// Example: 5.68
	UsdFee string `json:"usdFee"`
}

// Validate validates this withdrawal fee
func (m *WithdrawalFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WithdrawalFee) validateCalculatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("calculatedAt", "body", "datetime", m.CalculatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this withdrawal fee based on context it is used
func (m *WithdrawalFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WithdrawalFee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WithdrawalFee) UnmarshalBinary(b []byte) error {
	var res WithdrawalFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
