// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerPayment Payment object
//
// swagger:model customerPayment
type CustomerPayment struct {

	// Created timestamp
	// Example: 2022-11-23 19:49:21.386201 +0000 UTC
	// Format: datetime
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Fiat currency
	// Enum: [USD EUR]
	Currency string `json:"currency,omitempty"`

	// Order UUID
	// Example: 123e4567-e89b-12d3-a456-426655440000
	ID string `json:"id,omitempty"`

	// Payment price
	// Example: 29.9
	Price string `json:"price,omitempty"`

	// Payment status
	// Enum: [pending inProgress success failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this customer payment
func (m *CustomerPayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerPayment) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "datetime", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var customerPaymentTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USD","EUR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerPaymentTypeCurrencyPropEnum = append(customerPaymentTypeCurrencyPropEnum, v)
	}
}

const (

	// CustomerPaymentCurrencyUSD captures enum value "USD"
	CustomerPaymentCurrencyUSD string = "USD"

	// CustomerPaymentCurrencyEUR captures enum value "EUR"
	CustomerPaymentCurrencyEUR string = "EUR"
)

// prop value enum
func (m *CustomerPayment) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerPaymentTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerPayment) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

var customerPaymentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","inProgress","success","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerPaymentTypeStatusPropEnum = append(customerPaymentTypeStatusPropEnum, v)
	}
}

const (

	// CustomerPaymentStatusPending captures enum value "pending"
	CustomerPaymentStatusPending string = "pending"

	// CustomerPaymentStatusInProgress captures enum value "inProgress"
	CustomerPaymentStatusInProgress string = "inProgress"

	// CustomerPaymentStatusSuccess captures enum value "success"
	CustomerPaymentStatusSuccess string = "success"

	// CustomerPaymentStatusFailed captures enum value "failed"
	CustomerPaymentStatusFailed string = "failed"
)

// prop value enum
func (m *CustomerPayment) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerPaymentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerPayment) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customer payment based on context it is used
func (m *CustomerPayment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerPayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerPayment) UnmarshalBinary(b []byte) error {
	var res CustomerPayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
