// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Merchant merchant
//
// swagger:model merchant
type Merchant struct {

	// merchant UUID
	// Example: 1eb5fbb5-ece0-475c-9ddd-23c524a33e06
	ID string `json:"id,omitempty"`

	// Name
	// Example: My Store
	Name string `json:"name,omitempty"`

	// supported payment methods
	SupportedPaymentMethods []*SupportedPaymentMethod `json:"supportedPaymentMethods"`

	// webhook settings
	WebhookSettings *WebhookSettings `json:"webhookSettings"`

	// Website URL
	// Example: https://my-store.com
	Website string `json:"website,omitempty"`
}

// Validate validates this merchant
func (m *Merchant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedPaymentMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Merchant) validateSupportedPaymentMethods(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedPaymentMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedPaymentMethods); i++ {
		if swag.IsZero(m.SupportedPaymentMethods[i]) { // not required
			continue
		}

		if m.SupportedPaymentMethods[i] != nil {
			if err := m.SupportedPaymentMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedPaymentMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Merchant) validateWebhookSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.WebhookSettings) { // not required
		return nil
	}

	if m.WebhookSettings != nil {
		if err := m.WebhookSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhookSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this merchant based on the context it is used
func (m *Merchant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupportedPaymentMethods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWebhookSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Merchant) contextValidateSupportedPaymentMethods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedPaymentMethods); i++ {

		if m.SupportedPaymentMethods[i] != nil {
			if err := m.SupportedPaymentMethods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedPaymentMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Merchant) contextValidateWebhookSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.WebhookSettings != nil {
		if err := m.WebhookSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhookSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Merchant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Merchant) UnmarshalBinary(b []byte) error {
	var res Merchant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
