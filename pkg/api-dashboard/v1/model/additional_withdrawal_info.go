// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalWithdrawalInfo Additional withdrawal info
//
// swagger:model additionalWithdrawalInfo
type AdditionalWithdrawalInfo struct {

	// Address UUID
	// Example: dac3a5f5-abc1-4bb2-97e7-db51360e218c
	// Required: true
	AddressID string `json:"addressId"`

	// Balance UUID
	// Example: 918c5aa6-bdad-4cc8-8aa0-de059c618a05
	// Required: true
	BalanceID string `json:"balanceId"`

	// Link to blockchain explorer
	// Example: https://etherscan.io/tx/0xdf147859a6e66961326ac91f4bd5e9980432040031e5eb7108603d51b81ae005
	// Required: true
	ExplorerLink *string `json:"explorerLink"`

	// Withdrawal Fee
	// Example: 1.20
	// Required: true
	ServiceFee string `json:"serviceFee"`

	// Transaction Hash
	// Example: 0xdf147859a6e66961326ac91f4bd5e9980432040031e5eb7108603d51b81ae005
	// Required: true
	TransactionHash *string `json:"transactionHash"`
}

// Validate validates this additional withdrawal info
func (m *AdditionalWithdrawalInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExplorerLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalWithdrawalInfo) validateAddressID(formats strfmt.Registry) error {

	if err := validate.RequiredString("addressId", "body", m.AddressID); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalWithdrawalInfo) validateBalanceID(formats strfmt.Registry) error {

	if err := validate.RequiredString("balanceId", "body", m.BalanceID); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalWithdrawalInfo) validateExplorerLink(formats strfmt.Registry) error {

	if err := validate.Required("explorerLink", "body", m.ExplorerLink); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalWithdrawalInfo) validateServiceFee(formats strfmt.Registry) error {

	if err := validate.RequiredString("serviceFee", "body", m.ServiceFee); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalWithdrawalInfo) validateTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("transactionHash", "body", m.TransactionHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this additional withdrawal info based on context it is used
func (m *AdditionalWithdrawalInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalWithdrawalInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalWithdrawalInfo) UnmarshalBinary(b []byte) error {
	var res AdditionalWithdrawalInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
