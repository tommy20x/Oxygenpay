// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment Payment object
//
// swagger:model payment
type Payment struct {

	// additional info
	AdditionalInfo *PaymentAdditionalInfo `json:"additionalInfo,omitempty"`

	// Created timestamp
	// Example: 2022-11-23 19:49:21.386201 +0000 UTC
	// Required: true
	// Format: datetime
	CreatedAt strfmt.DateTime `json:"createdAt"`

	// Fiat ticker for payments and crypto for withdrawals
	//
	// Example: USD
	// Required: true
	Currency string `json:"currency"`

	// Optional payment description that customer will see in payment screen
	// Example: White T-shirt size M
	Description *string `json:"description"`

	// Order UUID generated on your side
	// Example: 123e4567-e89b-12d3-a456-426655440000
	// Required: true
	ID string `json:"id"`

	// Indicates that this is a test payment.
	// Test payments are processed in testnets (e.g. Ethereum Goerli)
	//
	// Required: true
	IsTest bool `json:"isTest"`

	// Optional order ID from your system.
	// Example: order#123
	OrderID *string `json:"orderId"`

	// URL for client payment screen
	// Example: https://pay.o2pay.co/payment/00000000-0000-0000-0000-000000000000
	PaymentURL string `json:"paymentUrl"`

	// Payment price or withdrawal amount
	// Example: 29.9
	// Required: true
	Price string `json:"price"`

	// Redirect URL after success client's payment
	// Example: https://my-site.com/success?order=abc123
	RedirectURL string `json:"redirectUrl"`

	// Payment status
	// Required: true
	// Enum: [pending inProgress success failed]
	Status string `json:"status"`

	// Payment type
	// Required: true
	// Enum: [payment withdrawal]
	Type string `json:"type"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsTest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateAdditionalInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInfo) { // not required
		return nil
	}

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "datetime", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateIsTest(formats strfmt.Registry) error {

	if err := validate.Required("isTest", "body", bool(m.IsTest)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePrice(formats strfmt.Registry) error {

	if err := validate.RequiredString("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

var paymentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","inProgress","success","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTypeStatusPropEnum = append(paymentTypeStatusPropEnum, v)
	}
}

const (

	// PaymentStatusPending captures enum value "pending"
	PaymentStatusPending string = "pending"

	// PaymentStatusInProgress captures enum value "inProgress"
	PaymentStatusInProgress string = "inProgress"

	// PaymentStatusSuccess captures enum value "success"
	PaymentStatusSuccess string = "success"

	// PaymentStatusFailed captures enum value "failed"
	PaymentStatusFailed string = "failed"
)

// prop value enum
func (m *Payment) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var paymentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["payment","withdrawal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTypeTypePropEnum = append(paymentTypeTypePropEnum, v)
	}
}

const (

	// PaymentTypePayment captures enum value "payment"
	PaymentTypePayment string = "payment"

	// PaymentTypeWithdrawal captures enum value "withdrawal"
	PaymentTypeWithdrawal string = "withdrawal"
)

// prop value enum
func (m *Payment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment based on the context it is used
func (m *Payment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) contextValidateAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AdditionalInfo != nil {
		if err := m.AdditionalInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentAdditionalInfo Represents additional context for payment or withdrawal
//
// swagger:model PaymentAdditionalInfo
type PaymentAdditionalInfo struct {

	// payment
	Payment *AdditionalPaymentInfo `json:"payment,omitempty"`

	// withdrawal
	Withdrawal *AdditionalWithdrawalInfo `json:"withdrawal,omitempty"`
}

// Validate validates this payment additional info
func (m *PaymentAdditionalInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWithdrawal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAdditionalInfo) validatePayment(formats strfmt.Registry) error {
	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo" + "." + "payment")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAdditionalInfo) validateWithdrawal(formats strfmt.Registry) error {
	if swag.IsZero(m.Withdrawal) { // not required
		return nil
	}

	if m.Withdrawal != nil {
		if err := m.Withdrawal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo" + "." + "withdrawal")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this payment additional info based on the context it is used
func (m *PaymentAdditionalInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePayment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWithdrawal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAdditionalInfo) contextValidatePayment(ctx context.Context, formats strfmt.Registry) error {

	if m.Payment != nil {
		if err := m.Payment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo" + "." + "payment")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAdditionalInfo) contextValidateWithdrawal(ctx context.Context, formats strfmt.Registry) error {

	if m.Withdrawal != nil {
		if err := m.Withdrawal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalInfo" + "." + "withdrawal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAdditionalInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAdditionalInfo) UnmarshalBinary(b []byte) error {
	var res PaymentAdditionalInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
