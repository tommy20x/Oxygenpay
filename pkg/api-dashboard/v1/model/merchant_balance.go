// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MerchantBalance merchant balance
//
// swagger:model merchantBalance
type MerchantBalance struct {

	// Assets amount in balance currency
	// Example: 50.40
	Amount string `json:"amount"`

	// Blockchain network
	// Example: ETH
	Blockchain string `json:"blockchain"`

	// Blockchain name
	// Example: Ethereum
	BlockchainName string `json:"blockchainName"`

	// Currency name
	// Example: USDT
	Currency string `json:"currency"`

	// Balance identifier
	// Example: 123e4567-e89b-12d3-a456-426655440000
	ID string `json:"id"`

	// Indicates whether balance is test or not
	IsTest bool `json:"isTest"`

	// Minimal withdrawal amount in USD
	// Example: 50
	MinimalWithdrawalAmountUSD string `json:"minimalWithdrawalAmountUSD"`

	// Balance name
	// Example: USDT (Ethereum)
	Name string `json:"name"`

	// Currency ticker
	// Example: ETH_USDT
	Ticker string `json:"ticker"`

	// Assets amount in USD
	// Example: 50.40
	UsdAmount string `json:"usdAmount"`
}

// Validate validates this merchant balance
func (m *MerchantBalance) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this merchant balance based on context it is used
func (m *MerchantBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MerchantBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MerchantBalance) UnmarshalBinary(b []byte) error {
	var res MerchantBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
