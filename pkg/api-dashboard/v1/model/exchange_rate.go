// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeRate Exchange rate
//
// swagger:model exchangeRate
type ExchangeRate struct {

	// Converted amount
	// Example: 0.066
	ConvertedAmount string `json:"convertedAmount,omitempty"`

	// Conversion rate
	ExchangeRate float64 `json:"exchangeRate,omitempty"`

	// Selected ticker
	// Example: USD
	From string `json:"from,omitempty"`

	// Selected ticker type
	// Enum: [fiat crypto]
	FromType string `json:"fromType,omitempty"`

	// Selected amount
	// Example: 123
	SelectedAmount string `json:"selectedAmount,omitempty"`

	// Desired ticket
	// Example: ETH
	To string `json:"to,omitempty"`

	// Desired ticker type
	// Enum: [fiat crypto]
	ToType string `json:"toType,omitempty"`
}

// Validate validates this exchange rate
func (m *ExchangeRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exchangeRateTypeFromTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fiat","crypto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeRateTypeFromTypePropEnum = append(exchangeRateTypeFromTypePropEnum, v)
	}
}

const (

	// ExchangeRateFromTypeFiat captures enum value "fiat"
	ExchangeRateFromTypeFiat string = "fiat"

	// ExchangeRateFromTypeCrypto captures enum value "crypto"
	ExchangeRateFromTypeCrypto string = "crypto"
)

// prop value enum
func (m *ExchangeRate) validateFromTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeRateTypeFromTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeRate) validateFromType(formats strfmt.Registry) error {
	if swag.IsZero(m.FromType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFromTypeEnum("fromType", "body", m.FromType); err != nil {
		return err
	}

	return nil
}

var exchangeRateTypeToTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fiat","crypto"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeRateTypeToTypePropEnum = append(exchangeRateTypeToTypePropEnum, v)
	}
}

const (

	// ExchangeRateToTypeFiat captures enum value "fiat"
	ExchangeRateToTypeFiat string = "fiat"

	// ExchangeRateToTypeCrypto captures enum value "crypto"
	ExchangeRateToTypeCrypto string = "crypto"
)

// prop value enum
func (m *ExchangeRate) validateToTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exchangeRateTypeToTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeRate) validateToType(formats strfmt.Registry) error {
	if swag.IsZero(m.ToType) { // not required
		return nil
	}

	// value enum
	if err := m.validateToTypeEnum("toType", "body", m.ToType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this exchange rate based on context it is used
func (m *ExchangeRate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeRate) UnmarshalBinary(b []byte) error {
	var res ExchangeRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
