// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Provider provider
//
// swagger:model provider
type Provider struct {

	// name
	// Enum: [google email]
	Name string `json:"name,omitempty"`
}

// Validate validates this provider
func (m *Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var providerTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["google","email"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerTypeNamePropEnum = append(providerTypeNamePropEnum, v)
	}
}

const (

	// ProviderNameGoogle captures enum value "google"
	ProviderNameGoogle string = "google"

	// ProviderNameEmail captures enum value "email"
	ProviderNameEmail string = "email"
)

// prop value enum
func (m *Provider) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, providerTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Provider) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provider based on context it is used
func (m *Provider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Provider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Provider) UnmarshalBinary(b []byte) error {
	var res Provider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
