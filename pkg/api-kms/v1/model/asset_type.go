// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AssetType Asset Type
//
// swagger:model assetType
type AssetType string

const (

	// AssetTypeCoin captures enum value "coin"
	AssetTypeCoin AssetType = "coin"

	// AssetTypeToken captures enum value "token"
	AssetTypeToken AssetType = "token"
)

// for schema
var assetTypeEnum []interface{}

func init() {
	var res []AssetType
	if err := json.Unmarshal([]byte(`["coin","token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetTypeEnum = append(assetTypeEnum, v)
	}
}

func (m AssetType) validateAssetTypeEnum(path, location string, value AssetType) error {
	if err := validate.EnumCase(path, location, value, assetTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this asset type
func (m AssetType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAssetTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this asset type based on context it is used
func (m AssetType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
