// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMaticTransactionRequest create matic transaction request
//
// swagger:model createMaticTransactionRequest
type CreateMaticTransactionRequest struct {

	// Raw amount in wei or contract decimals
	// Example: 100000000000000000
	// Required: true
	Amount string `json:"amount"`

	// asset type
	// Required: true
	AssetType AssetType `json:"assetType"`

	// ERC-20 contract address
	// Example: 0x5e41bc5922370522800103f826c3bb9cd5d83f1a
	ContractAddress string `json:"contractAddress,omitempty"`

	// Transaction Gas amount
	// Example: 3
	// Required: true
	// Minimum: 1
	Gas int64 `json:"gas"`

	// Max Fee Per Gas (wei)
	// Example: 200000000
	// Required: true
	MaxFeePerGas string `json:"maxFeePerGas"`

	// Max Priority Fee Per Gas (wei)
	// Example: 2000000
	// Required: true
	MaxPriorityPerGas string `json:"maxPriorityPerGas"`

	// Network (chain) Id
	// Example: 1
	// Required: true
	NetworkID int64 `json:"networkId"`

	// Transaction nonce
	// Example: 40
	// Required: true
	// Minimum: 0
	Nonce *int64 `json:"nonce"`

	// Recipient address
	// Example: 0x5e41bc5922370522800103f826c3bb9cd5d83f1a
	// Required: true
	Recipient string `json:"recipient"`
}

// Validate validates this create matic transaction request
func (m *CreateMaticTransactionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxFeePerGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxPriorityPerGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMaticTransactionRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.RequiredString("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("assetType", "body", AssetType(m.AssetType)); err != nil {
		return err
	}

	if err := m.AssetType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetType")
		}
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateGas(formats strfmt.Registry) error {

	if err := validate.Required("gas", "body", int64(m.Gas)); err != nil {
		return err
	}

	if err := validate.MinimumInt("gas", "body", m.Gas, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateMaxFeePerGas(formats strfmt.Registry) error {

	if err := validate.RequiredString("maxFeePerGas", "body", m.MaxFeePerGas); err != nil {
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateMaxPriorityPerGas(formats strfmt.Registry) error {

	if err := validate.RequiredString("maxPriorityPerGas", "body", m.MaxPriorityPerGas); err != nil {
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("networkId", "body", int64(m.NetworkID)); err != nil {
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	if err := validate.MinimumInt("nonce", "body", *m.Nonce, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateMaticTransactionRequest) validateRecipient(formats strfmt.Registry) error {

	if err := validate.RequiredString("recipient", "body", m.Recipient); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create matic transaction request based on the context it is used
func (m *CreateMaticTransactionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMaticTransactionRequest) contextValidateAssetType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AssetType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMaticTransactionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMaticTransactionRequest) UnmarshalBinary(b []byte) error {
	var res CreateMaticTransactionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
