// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTronTransactionRequest create tron transaction request
//
// swagger:model createTronTransactionRequest
type CreateTronTransactionRequest struct {

	// Raw amount in SUN or contract decimals
	// Example: 100000
	// Required: true
	Amount string `json:"amount"`

	// asset type
	// Required: true
	AssetType AssetType `json:"assetType"`

	// Contract address is base58
	// Example: TTYxentT3sf8XHbtHGyWX2uDgdadE9uYSL
	ContractAddress string `json:"contractAddress,omitempty"`

	// Contract call fee limit in SUN
	FeeLimit int64 `json:"feeLimit,omitempty"`

	// Mainnet / Testnet selection
	// Example: false
	IsTest bool `json:"isTest"`

	// Recipient address in base58
	// Example: TTYxentT3sf8XHbtHGyWX2uDgdadE9uYSL
	// Required: true
	Recipient string `json:"recipient"`
}

// Validate validates this create tron transaction request
func (m *CreateTronTransactionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTronTransactionRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.RequiredString("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *CreateTronTransactionRequest) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("assetType", "body", AssetType(m.AssetType)); err != nil {
		return err
	}

	if err := m.AssetType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetType")
		}
		return err
	}

	return nil
}

func (m *CreateTronTransactionRequest) validateRecipient(formats strfmt.Registry) error {

	if err := validate.RequiredString("recipient", "body", m.Recipient); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create tron transaction request based on the context it is used
func (m *CreateTronTransactionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTronTransactionRequest) contextValidateAssetType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AssetType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTronTransactionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTronTransactionRequest) UnmarshalBinary(b []byte) error {
	var res CreateTronTransactionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
