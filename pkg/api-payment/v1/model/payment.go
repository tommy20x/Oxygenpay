// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment payment
//
// swagger:model payment
type Payment struct {

	// Currency
	// Example: USD
	// Required: true
	Currency string `json:"currency"`

	// customer
	Customer *Customer `json:"customer"`

	// Payment description
	// Example: M-sized sweater
	Description *string `json:"description"`

	// Payment UUID
	// Example: a51e7a5-f0c8-48dc-a9fb-a335481ae846
	// Required: true
	ID string `json:"id"`

	// Indicates is payment method can be changed
	// Example: true
	// Required: true
	IsLocked bool `json:"isLocked"`

	// Merchant's store name
	// Example: Delta Airlines
	// Required: true
	MerchantName string `json:"merchantName"`

	// payment info
	PaymentInfo *PaymentInfo `json:"paymentInfo"`

	// payment method
	PaymentMethod *PaymentMethod `json:"paymentMethod"`

	// Price
	// Example: 39.9
	// Required: true
	Price float64 `json:"price"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateCustomer(formats strfmt.Registry) error {
	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateIsLocked(formats strfmt.Registry) error {

	if err := validate.Required("isLocked", "body", bool(m.IsLocked)); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateMerchantName(formats strfmt.Registry) error {

	if err := validate.RequiredString("merchantName", "body", m.MerchantName); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentInfo) { // not required
		return nil
	}

	if m.PaymentInfo != nil {
		if err := m.PaymentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validatePaymentMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	if m.PaymentMethod != nil {
		if err := m.PaymentMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentMethod")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", float64(m.Price)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment based on the context it is used
func (m *Payment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if m.Customer != nil {
		if err := m.Customer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) contextValidatePaymentInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentInfo != nil {
		if err := m.PaymentInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) contextValidatePaymentMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentMethod != nil {
		if err := m.PaymentMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentMethod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
