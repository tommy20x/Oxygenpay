// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SupportedPaymentMethods supported payment methods
//
// swagger:model supportedPaymentMethods
type SupportedPaymentMethods struct {

	// available methods
	AvailableMethods []*SupportedPaymentMethod `json:"availableMethods"`
}

// Validate validates this supported payment methods
func (m *SupportedPaymentMethods) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableMethods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportedPaymentMethods) validateAvailableMethods(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableMethods); i++ {
		if swag.IsZero(m.AvailableMethods[i]) { // not required
			continue
		}

		if m.AvailableMethods[i] != nil {
			if err := m.AvailableMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availableMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this supported payment methods based on the context it is used
func (m *SupportedPaymentMethods) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableMethods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportedPaymentMethods) contextValidateAvailableMethods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailableMethods); i++ {

		if m.AvailableMethods[i] != nil {
			if err := m.AvailableMethods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availableMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupportedPaymentMethods) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupportedPaymentMethods) UnmarshalBinary(b []byte) error {
	var res SupportedPaymentMethods
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
