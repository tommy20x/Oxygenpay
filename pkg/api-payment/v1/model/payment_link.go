// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentLink payment link
//
// swagger:model paymentLink
type PaymentLink struct {

	// Currency
	// Example: USD
	// Required: true
	Currency string `json:"currency"`

	// Payment description
	// Example: M-sized sweater
	Description *string `json:"description"`

	// Merchant's store name
	// Example: Delta Airlines
	// Required: true
	MerchantName string `json:"merchantName"`

	// Price
	// Example: 39.9
	// Required: true
	Price float64 `json:"price"`
}

// Validate validates this payment link
func (m *PaymentLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentLink) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *PaymentLink) validateMerchantName(formats strfmt.Registry) error {

	if err := validate.RequiredString("merchantName", "body", m.MerchantName); err != nil {
		return err
	}

	return nil
}

func (m *PaymentLink) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", float64(m.Price)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment link based on context it is used
func (m *PaymentLink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentLink) UnmarshalBinary(b []byte) error {
	var res PaymentLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
