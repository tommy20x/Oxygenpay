// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Blockchain Supported blockchain
//
// swagger:model blockchain
type Blockchain string

const (

	// BlockchainBTC captures enum value "BTC"
	BlockchainBTC Blockchain = "BTC"

	// BlockchainETH captures enum value "ETH"
	BlockchainETH Blockchain = "ETH"

	// BlockchainMATIC captures enum value "MATIC"
	BlockchainMATIC Blockchain = "MATIC"

	// BlockchainTRON captures enum value "TRON"
	BlockchainTRON Blockchain = "TRON"
)

// for schema
var blockchainEnum []interface{}

func init() {
	var res []Blockchain
	if err := json.Unmarshal([]byte(`["BTC","ETH","MATIC","TRON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blockchainEnum = append(blockchainEnum, v)
	}
}

func (m Blockchain) validateBlockchainEnum(path, location string, value Blockchain) error {
	if err := validate.EnumCase(path, location, value, blockchainEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this blockchain
func (m Blockchain) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBlockchainEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this blockchain based on context it is used
func (m Blockchain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
