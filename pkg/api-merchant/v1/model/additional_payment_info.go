// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalPaymentInfo Additional payment info
//
// swagger:model additionalPaymentInfo
type AdditionalPaymentInfo struct {

	// Customer's Email
	// Example: user@gmail.com
	// Required: true
	CustomerEmail *string `json:"customerEmail"`

	// Customer's selected crypto currency
	// Example: USDT (Ethereum)
	// Required: true
	SelectedCurrency *string `json:"selectedCurrency"`

	// Service fee in customer's selected crypto currency
	// Example: 1.20
	// Required: true
	ServiceFee *string `json:"serviceFee"`
}

// Validate validates this additional payment info
func (m *AdditionalPaymentInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalPaymentInfo) validateCustomerEmail(formats strfmt.Registry) error {

	if err := validate.Required("customerEmail", "body", m.CustomerEmail); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalPaymentInfo) validateSelectedCurrency(formats strfmt.Registry) error {

	if err := validate.Required("selectedCurrency", "body", m.SelectedCurrency); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalPaymentInfo) validateServiceFee(formats strfmt.Registry) error {

	if err := validate.Required("serviceFee", "body", m.ServiceFee); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this additional payment info based on context it is used
func (m *AdditionalPaymentInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalPaymentInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalPaymentInfo) UnmarshalBinary(b []byte) error {
	var res AdditionalPaymentInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
