// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePaymentLinkRequest Payment Link object
//
// swagger:model createPaymentLinkRequest
type CreatePaymentLinkRequest struct {

	// Fiat ticker for payment template.
	// Required: true
	// Enum: [USD EUR]
	Currency string `json:"currency"`

	// Optional payment description visible for a customer in payment screen
	// Example: White T-shirt size M
	Description *string `json:"description"`

	// Name
	// Example: My Link
	// Required: true
	// Max Length: 64
	// Min Length: 4
	Name string `json:"name"`

	// Price in fiat currency
	// Example: 29.9
	// Required: true
	// Minimum: 0.01
	Price float64 `json:"price"`

	// Redirect URL after successful customer's payment
	// Example: https://my-site.com/success?order=abc123
	RedirectURL *string `json:"redirectUrl"`

	// Action type after OxygenPay receives incoming payment from a customer.
	// - `redirectUrl` displays "Back to site" button with provided .redirectUrl.
	// - `showMessage` displays "Show message" with content provided in .successMessage.
	//
	// Required: true
	// Enum: [redirect showMessage]
	SuccessAction string `json:"successAction"`

	// message after successful customer's payment
	// Example: Thank you!
	// Max Length: 250
	// Min Length: 4
	SuccessMessage *string `json:"successMessage"`
}

// Validate validates this create payment link request
func (m *CreatePaymentLinkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createPaymentLinkRequestTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USD","EUR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createPaymentLinkRequestTypeCurrencyPropEnum = append(createPaymentLinkRequestTypeCurrencyPropEnum, v)
	}
}

const (

	// CreatePaymentLinkRequestCurrencyUSD captures enum value "USD"
	CreatePaymentLinkRequestCurrencyUSD string = "USD"

	// CreatePaymentLinkRequestCurrencyEUR captures enum value "EUR"
	CreatePaymentLinkRequestCurrencyEUR string = "EUR"
)

// prop value enum
func (m *CreatePaymentLinkRequest) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createPaymentLinkRequestTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreatePaymentLinkRequest) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *CreatePaymentLinkRequest) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", m.Name, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 64); err != nil {
		return err
	}

	return nil
}

func (m *CreatePaymentLinkRequest) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", float64(m.Price)); err != nil {
		return err
	}

	if err := validate.Minimum("price", "body", m.Price, 0.01, false); err != nil {
		return err
	}

	return nil
}

var createPaymentLinkRequestTypeSuccessActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["redirect","showMessage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createPaymentLinkRequestTypeSuccessActionPropEnum = append(createPaymentLinkRequestTypeSuccessActionPropEnum, v)
	}
}

const (

	// CreatePaymentLinkRequestSuccessActionRedirect captures enum value "redirect"
	CreatePaymentLinkRequestSuccessActionRedirect string = "redirect"

	// CreatePaymentLinkRequestSuccessActionShowMessage captures enum value "showMessage"
	CreatePaymentLinkRequestSuccessActionShowMessage string = "showMessage"
)

// prop value enum
func (m *CreatePaymentLinkRequest) validateSuccessActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createPaymentLinkRequestTypeSuccessActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreatePaymentLinkRequest) validateSuccessAction(formats strfmt.Registry) error {

	if err := validate.RequiredString("successAction", "body", m.SuccessAction); err != nil {
		return err
	}

	// value enum
	if err := m.validateSuccessActionEnum("successAction", "body", m.SuccessAction); err != nil {
		return err
	}

	return nil
}

func (m *CreatePaymentLinkRequest) validateSuccessMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.SuccessMessage) { // not required
		return nil
	}

	if err := validate.MinLength("successMessage", "body", *m.SuccessMessage, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("successMessage", "body", *m.SuccessMessage, 250); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create payment link request based on context it is used
func (m *CreatePaymentLinkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreatePaymentLinkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreatePaymentLinkRequest) UnmarshalBinary(b []byte) error {
	var res CreatePaymentLinkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
